{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":7728045,"sourceType":"datasetVersion","datasetId":4515288}],"dockerImageVersionId":30698,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# first overview of the dataset","metadata":{"_uuid":"0189d975-e4c3-4062-99e6-b6996ba3c2fc","_cell_guid":"25934bf1-6309-42b0-b521-5a98a4908cf9","trusted":true}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\ndf = pd.read_csv('/kaggle/input/imdb-dataset-2023/imdb_data.csv',dtype='unicode')\ndf.head()","metadata":{"_uuid":"63f6b7ec-758f-4c5a-bf33-9ac8f2be97d1","_cell_guid":"8c5e5f78-0e17-4283-87b0-f0181b5cb625","collapsed":false,"execution":{"iopub.status.busy":"2024-04-29T06:28:32.945555Z","iopub.execute_input":"2024-04-29T06:28:32.945991Z","iopub.status.idle":"2024-04-29T06:28:32.997759Z","shell.execute_reply.started":"2024-04-29T06:28:32.945953Z","shell.execute_reply":"2024-04-29T06:28:32.996869Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"_uuid":"f09329d1-6c8c-4f00-90a5-7a672ad6c30b","_cell_guid":"53e0d3b7-8e97-4423-977d-da3d507177b4","collapsed":false,"execution":{"iopub.status.busy":"2024-04-29T06:28:32.999480Z","iopub.execute_input":"2024-04-29T06:28:32.999960Z","iopub.status.idle":"2024-04-29T06:28:33.012210Z","shell.execute_reply.started":"2024-04-29T06:28:32.999931Z","shell.execute_reply":"2024-04-29T06:28:33.011098Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.info()","metadata":{"_uuid":"79c245cf-8503-4271-ac97-54f227352438","_cell_guid":"57b1af27-a167-4044-aabb-6b6c4a1028a9","collapsed":false,"execution":{"iopub.status.busy":"2024-04-29T06:28:33.014049Z","iopub.execute_input":"2024-04-29T06:28:33.014393Z","iopub.status.idle":"2024-04-29T06:28:33.027626Z","shell.execute_reply.started":"2024-04-29T06:28:33.014365Z","shell.execute_reply":"2024-04-29T06:28:33.026595Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.describe()","metadata":{"_uuid":"79decaf5-515d-4f6b-8787-ad3c0ccad332","_cell_guid":"705cdbc4-dfbb-473a-8bea-112aa6fed7bc","collapsed":false,"execution":{"iopub.status.busy":"2024-04-29T06:28:33.028872Z","iopub.execute_input":"2024-04-29T06:28:33.029837Z","iopub.status.idle":"2024-04-29T06:28:33.079778Z","shell.execute_reply.started":"2024-04-29T06:28:33.029804Z","shell.execute_reply":"2024-04-29T06:28:33.078731Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#cast datatype\ndf[['runtimeMinutes', 'numVotes', 'budget']] = df[['runtimeMinutes', 'numVotes', 'budget']].astype(int)\ndf['averageRating'] = df['averageRating'].astype(float)\n#fill NA for gross revenue with median value\ndf['gross'] = pd.to_numeric(df['gross'].fillna(df['gross'].astype(float).median()), errors='coerce').astype(int)\n#fillna for release date using interpolate method\ndf['release_date'] = pd.to_datetime(df['release_date'].interpolate(method='linear', limit_direction='forward'), errors='coerce')","metadata":{"_uuid":"16d52bf7-dcf7-4d61-b96e-80be02c909bd","_cell_guid":"8fd5d8c5-4a71-4d14-9055-3b80bf723722","collapsed":false,"execution":{"iopub.status.busy":"2024-04-29T06:28:33.084085Z","iopub.execute_input":"2024-04-29T06:28:33.084453Z","iopub.status.idle":"2024-04-29T06:28:33.114490Z","shell.execute_reply.started":"2024-04-29T06:28:33.084425Z","shell.execute_reply":"2024-04-29T06:28:33.113251Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#print number of categories\nprint('Number of categories: {}'.format(df['genres'].str.split(',').explode().nunique()))\nprint(df['genres'].str.split(',').explode().unique())","metadata":{"_uuid":"8e1ae915-1a18-48c5-8863-2a1dbe794504","_cell_guid":"2d2dc9ea-6170-4034-91b6-396dd20313fb","collapsed":false,"execution":{"iopub.status.busy":"2024-04-29T06:28:33.116005Z","iopub.execute_input":"2024-04-29T06:28:33.116451Z","iopub.status.idle":"2024-04-29T06:28:33.134767Z","shell.execute_reply.started":"2024-04-29T06:28:33.116411Z","shell.execute_reply":"2024-04-29T06:28:33.133721Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Visualization","metadata":{"_uuid":"341dba48-d581-48a3-ab4a-4e33f930b316","_cell_guid":"ce9b58f2-112b-44f5-8c65-7bf6f16c98ca","trusted":true}},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_style(\"whitegrid\")\nplt.figure(figsize=(10, 6))\nsns.histplot(df['averageRating'], kde=True, bins=20)\nplt.title('Distribution of Average Ratings')\nplt.xlabel('Average Rating')\nplt.ylabel('Frequency')\nplt.xticks(np.arange(0, 10.5, 0.5))\nplt.show()","metadata":{"_uuid":"2e9b8fb2-5715-4f57-9714-f291b48357e7","_cell_guid":"1171c5f9-923d-42e6-979a-2da041bab7aa","collapsed":false,"execution":{"iopub.status.busy":"2024-04-29T06:28:33.135775Z","iopub.execute_input":"2024-04-29T06:28:33.136068Z","iopub.status.idle":"2024-04-29T06:28:33.806249Z","shell.execute_reply.started":"2024-04-29T06:28:33.136044Z","shell.execute_reply":"2024-04-29T06:28:33.804699Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### -> most of the films avg rating on IMDB fall around 6.5","metadata":{"_uuid":"bbc84d87-8006-4730-9a5d-d8e03cfb0dd6","_cell_guid":"0607d40f-8a58-4474-852b-7e1f7c193382","trusted":true}},{"cell_type":"code","source":"plt.figure(figsize=(10, 6))\nsns.scatterplot(data=df, x='averageRating', y='numVotes')\nplt.xscale('linear')\nplt.yscale('log')\nplt.title('Average Rating vs. Number of Votes')\nplt.xlabel('Average Rating')\nplt.ylabel('Number of Votes (log scale)')\nplt.xticks(np.arange(0, 10.5, 0.5))\nplt.show()","metadata":{"_uuid":"c7bdd80a-fb03-47f9-8584-bea1fbaa4c62","_cell_guid":"7564d421-cab0-4c11-8330-9955f18c8c52","collapsed":false,"execution":{"iopub.status.busy":"2024-04-29T06:28:33.807811Z","iopub.execute_input":"2024-04-29T06:28:33.808187Z","iopub.status.idle":"2024-04-29T06:28:34.564623Z","shell.execute_reply.started":"2024-04-29T06:28:33.808157Z","shell.execute_reply":"2024-04-29T06:28:34.563542Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### ->It doesn't seem like there is a strong relationship between Average Rating vs. Number of Votes","metadata":{"_uuid":"8bc4e61d-8ef1-4537-9b7d-986010327491","_cell_guid":"dd9bdb66-cbc6-47c5-bbc2-d4e0fd30b7d9","trusted":true}},{"cell_type":"code","source":"df['numVotes'].mean()","metadata":{"_uuid":"795a67b0-519e-4429-9190-b905e2c26bfd","_cell_guid":"82a5e647-c117-420f-8090-b7906075f277","collapsed":false,"execution":{"iopub.status.busy":"2024-04-29T06:28:34.566217Z","iopub.execute_input":"2024-04-29T06:28:34.566884Z","iopub.status.idle":"2024-04-29T06:28:34.574517Z","shell.execute_reply.started":"2024-04-29T06:28:34.566816Z","shell.execute_reply":"2024-04-29T06:28:34.573331Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Assuming 'df' is your DataFrame with the IMDB data.\n\n# Set the aesthetic style of the plots\nsns.set_style(\"whitegrid\")\n\n# Histogram of runtimeMinutes\nplt.figure(figsize=(10, 6))\nsns.histplot(df['runtimeMinutes'].dropna().astype(int), bins=30, kde=False)\nplt.title('Distribution of Movie Run Times')\nplt.xlabel('Runtime in Minutes')\nplt.ylabel('Number of Movies')\nplt.xticks(np.arange(0, 260, 10))\nplt.show()\n\n# Boxplot to identify outliers in movie runtimes\nplt.figure(figsize=(10, 6))\nsns.boxplot(x=df['runtimeMinutes'].dropna().astype(int))\nplt.title('Boxplot of Movie Run Times')\nplt.xlabel('Runtime in Minutes')\nplt.show()","metadata":{"_uuid":"9499bae6-e2fc-4dc1-a270-5ec539022f3c","_cell_guid":"75608dc9-2531-4d6e-b60c-3f55d00d38e6","collapsed":false,"execution":{"iopub.status.busy":"2024-04-29T06:28:34.576175Z","iopub.execute_input":"2024-04-29T06:28:34.576955Z","iopub.status.idle":"2024-04-29T06:28:35.447623Z","shell.execute_reply.started":"2024-04-29T06:28:34.576909Z","shell.execute_reply":"2024-04-29T06:28:35.446133Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### ->most of the films duration falls round 100-125 minutes","metadata":{"_uuid":"c3de02c5-59c1-4701-be72-a9a6aea3ac9f","_cell_guid":"00af403f-46fd-40b2-a9a8-14a8dad418b0","trusted":true}},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Assuming 'df' is your DataFrame with the IMDB data.\n\n# Set the aesthetic style of the plots\nsns.set_style(\"whitegrid\")\n\n# Histogram of runtimeMinutes\nplt.figure(figsize=(10, 6))\nsns.histplot(df['runtimeMinutes'].dropna().astype(int), bins=30, kde=False)\nplt.title('Distribution of Movie Run Times')\nplt.xlabel('Runtime in Minutes')\nplt.ylabel('Number of Movies')\nplt.show()\n\n# Boxplot to identify outliers in movie runtimes\nplt.figure(figsize=(10, 6))\nsns.boxplot(x=df['runtimeMinutes'].dropna().astype(int))\nplt.title('Boxplot of Movie Run Times')\nplt.xlabel('Runtime in Minutes')\nplt.show()","metadata":{"_uuid":"49bc0c42-4655-47b4-92f3-fc321d1d6092","_cell_guid":"565016df-9d28-4373-96ea-bf4435596b63","collapsed":false,"execution":{"iopub.status.busy":"2024-04-29T06:28:35.450242Z","iopub.execute_input":"2024-04-29T06:28:35.450805Z","iopub.status.idle":"2024-04-29T06:28:36.167425Z","shell.execute_reply.started":"2024-04-29T06:28:35.450773Z","shell.execute_reply":"2024-04-29T06:28:36.166265Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"year_counts = df['release_date'].dt.year.value_counts().sort_index()\n\n# Create a bar chart\nplt.figure(figsize=(16, 9))\nbars = plt.bar(year_counts.index, year_counts.values,)\n\n# Add a legend (optional, depending on your dataset and preferences)\nplt.legend(bars, year_counts.index, loc='upper left', bbox_to_anchor=(1.05, 1), fontsize=12)\n\n# Add title and labels\nplt.title('Number of Content Per Year', loc='center', fontsize=18)\nplt.xlabel('Year')\nplt.ylabel('Number of Contents')\nplt.xticks(year_counts.index, rotation=90)\n\n# Show the plot\nplt.show()","metadata":{"_uuid":"4d74c1a6-e680-45cf-9af3-cd8e6ab0ea0f","_cell_guid":"166608da-d4a3-4abf-9fe9-0439dd881d4d","collapsed":false,"execution":{"iopub.status.busy":"2024-04-29T06:51:56.589657Z","iopub.execute_input":"2024-04-29T06:51:56.590049Z","iopub.status.idle":"2024-04-29T06:51:58.006341Z","shell.execute_reply.started":"2024-04-29T06:51:56.590018Z","shell.execute_reply":"2024-04-29T06:51:58.005265Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### -> number of films released each year has been increas linearly since 1970 but drop significantly during the covid era 2020-2021, and then gradually bounced back in 2022.","metadata":{"_uuid":"29ba4e3e-5657-466d-95bb-08987ec58013","_cell_guid":"2c5c8a53-27db-46c3-96ac-595f7dc04361","trusted":true}},{"cell_type":"code","source":"","metadata":{"_uuid":"04c66653-16e3-415d-b26e-942be61ba84f","_cell_guid":"0a1c1d52-b1d0-4529-bd2c-d6bb1eb6ed9b","collapsed":false,"execution":{"iopub.status.busy":"2024-04-29T07:09:44.419259Z","iopub.execute_input":"2024-04-29T07:09:44.419672Z","iopub.status.idle":"2024-04-29T07:09:44.431662Z","shell.execute_reply.started":"2024-04-29T07:09:44.419641Z","shell.execute_reply":"2024-04-29T07:09:44.430218Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import calendar\nmonth_counts = df['release_date'].dt.month.value_counts().sort_index()\nmonth_names = [calendar.month_name[int(month)] for month in month_counts.index]\nmonth_counts_named = pd.DataFrame({'Month': month_names, 'Count': month_counts.values})\n\n# Plot the pie chart\nplt.figure(figsize=(14, 8))\nplt.pie(month_counts, labels=month_names, autopct='%1.1f%%', startangle=140)\nplt.title('Distribution of Content Releases by Month')\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.show()","metadata":{"_uuid":"74b5e321-163f-4eb9-ab52-eb09c59694a5","_cell_guid":"5ed73321-2ac2-4f92-96f3-01f88b7e1d2d","collapsed":false,"execution":{"iopub.status.busy":"2024-04-29T07:18:12.415406Z","iopub.execute_input":"2024-04-29T07:18:12.416182Z","iopub.status.idle":"2024-04-29T07:18:12.714486Z","shell.execute_reply.started":"2024-04-29T07:18:12.416152Z","shell.execute_reply":"2024-04-29T07:18:12.713408Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### -> They most prefer to arrange premiere at May, June, Septemper, and December.\"","metadata":{"_uuid":"fb90768e-e1b0-4a31-af23-c0bce7fedd2a","_cell_guid":"7a73eeff-e1e5-4f38-962a-d6287f37fb5e","trusted":true}},{"cell_type":"code","source":"df['roi'] = (df['gross'] - df['budget']) / df['budget']","metadata":{"_uuid":"1a326511-3808-4bb2-847e-0c68b1a9d101","_cell_guid":"f4afe4ff-6405-4ccb-b6c3-3b5c07cc6c64","collapsed":false,"execution":{"iopub.status.busy":"2024-04-29T07:33:07.592687Z","iopub.execute_input":"2024-04-29T07:33:07.593054Z","iopub.status.idle":"2024-04-29T07:33:07.600616Z","shell.execute_reply.started":"2024-04-29T07:33:07.593028Z","shell.execute_reply":"2024-04-29T07:33:07.599199Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Categorize ROI into ranges for better visualization\nroi_categories = pd.cut(df['roi'], bins=[-np.inf, -0.1, 0.1, 1, np.inf], labels=['Loss', 'Break-even', 'Profit (<=100%)', 'Profit (>100%)'])\nroi_counts = roi_categories.value_counts().sort_index()\n\nplt.figure(figsize=(10, 6))\nsns.barplot(x=roi_counts.index, y=roi_counts.values)\nplt.title('Movie Count by ROI Categories')\nplt.xlabel('ROI Category')\nplt.ylabel('Number of Movies')\nplt.show()","metadata":{"_uuid":"5c0e6649-43c2-4d83-b49f-4eded74baa94","_cell_guid":"5f83a9ef-96a9-4a65-941e-5b7fe4629435","collapsed":false,"execution":{"iopub.status.busy":"2024-04-29T07:33:26.091270Z","iopub.execute_input":"2024-04-29T07:33:26.092509Z","iopub.status.idle":"2024-04-29T07:33:26.327553Z","shell.execute_reply.started":"2024-04-29T07:33:26.092471Z","shell.execute_reply":"2024-04-29T07:33:26.326684Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Assuming 'df' is your DataFrame with the IMDB data.\n\n# Extract year from release_date and create a new column 'release_year'\ndf['release_year'] = pd.to_datetime(df['release_date']).dt.year\n\n# Calculate ROI and add it as a new column\n# Make sure to filter out rows with missing, zero, or negative values in 'budget' or 'gross'\ndf = df[(df['budget'] > 0) & (df['gross'] > 0)]\ndf['roi'] = (df['gross'] - df['budget']) / df['budget']\n\n# Group by 'release_year' and calculate the average ROI for each year\nroi_by_year = df.groupby('release_year')['roi'].median().reset_index()\n\n# Sort the results by ROI to find the highest values\nroi_by_year_sorted = roi_by_year.sort_values('roi', ascending=False)\n\n# Bar plot of Average ROI by Release Year\nplt.figure(figsize=(14, 8))\nsns.barplot(data=roi_by_year_sorted, x='release_year', y='roi', palette=\"viridis\")\nplt.xticks(rotation=90)  # Rotate x-axis labels for better readability\nplt.title('Median ROI by Release Year')\nplt.xlabel('Release Year')\nplt.ylabel('Average ROI')\nplt.show()","metadata":{"_uuid":"c5831224-9055-4b98-9528-73687aa091c7","_cell_guid":"a80d203b-3c74-46c8-a7d6-cc4ddb62e2b4","collapsed":false,"execution":{"iopub.status.busy":"2024-04-29T07:39:54.917198Z","iopub.execute_input":"2024-04-29T07:39:54.918706Z","iopub.status.idle":"2024-04-29T07:39:55.866422Z","shell.execute_reply.started":"2024-04-29T07:39:54.918668Z","shell.execute_reply":"2024-04-29T07:39:55.865302Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Assuming 'df' is your DataFrame with the IMDB data.\n\n# Split directors (assuming multiple directors are separated by commas) and explode into new rows\ndf_directors = df['directors'].str.split(',').explode()\n\n# Get the top 10 directors by movie count\ntop_directors = df_directors.value_counts().head(10)\n\n# Bar chart of the top directors based on the number of movies directed\nplt.figure(figsize=(12, 6))\nsns.barplot(x=top_directors.values, y=top_directors.index, palette=\"viridis\")\nplt.title('Top 10 Directors by Number of Movies Directed')\nplt.xlabel('Number of Movies')\nplt.ylabel('Director')\nplt.show()","metadata":{"_uuid":"01e4c05f-6aa2-4c31-a8c1-ca42751e2b25","_cell_guid":"fefb63b0-bbe0-49cb-a196-b26702d8b6e5","collapsed":false,"execution":{"iopub.status.busy":"2024-04-29T07:51:52.503810Z","iopub.execute_input":"2024-04-29T07:51:52.504210Z","iopub.status.idle":"2024-04-29T07:51:52.858953Z","shell.execute_reply.started":"2024-04-29T07:51:52.504180Z","shell.execute_reply":"2024-04-29T07:51:52.857875Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Filter the original dataframe to include only movies directed by the top directors\ntop_directors_movies = df[df['directors'].isin(top_directors.index)]\n\n# Split directors and explode into new rows while keeping the average rating\ntop_directors_movies = top_directors_movies.assign(director=top_directors_movies['directors'].str.split(',')).explode('director')\ntop_directors_movies = top_directors_movies[top_directors_movies['director'].isin(top_directors.index)]\n\n# Boxplot to compare the average ratings of movies among top directors\nplt.figure(figsize=(12, 6))\nsns.boxplot(data=top_directors_movies, x='director', y='averageRating', palette=\"viridis\")\nplt.xticks(rotation=45)  # Rotate x-axis labels for better readability\nplt.title('Comparison of Average Movie Ratings Among Top Directors')\nplt.xlabel('Director')\nplt.ylabel('Average Movie Rating')\nplt.show()","metadata":{"_uuid":"475df1f4-eee0-4e59-88cd-d9dd54f56ee8","_cell_guid":"3700fe94-507e-496c-a5ab-7af0b8110819","collapsed":false,"execution":{"iopub.status.busy":"2024-04-29T07:52:14.756894Z","iopub.execute_input":"2024-04-29T07:52:14.757566Z","iopub.status.idle":"2024-04-29T07:52:15.172757Z","shell.execute_reply.started":"2024-04-29T07:52:14.757535Z","shell.execute_reply":"2024-04-29T07:52:15.171690Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Assuming 'df' is your DataFrame with the IMDB data.\n\n# Sort by 'averageRating' and take the top 10\ntop_rated_films = df.nlargest(10, 'averageRating')\n\n# Bar chart for top 10 films by ratings\nplt.figure(figsize=(12, 6))\nsns.barplot(data=top_rated_films, x='averageRating', y='primaryTitle', palette=\"coolwarm\")\nplt.title('Top 10 Films by Ratings')\nplt.xlabel('Average Rating')\nplt.ylabel('Film Title')\nplt.show()","metadata":{"_uuid":"f0ffbd6e-1aeb-42e0-9ecc-3e9da481a701","_cell_guid":"57199ab4-e550-4407-8c4e-701a053893ae","collapsed":false,"execution":{"iopub.status.busy":"2024-04-29T08:16:58.012439Z","iopub.execute_input":"2024-04-29T08:16:58.012869Z","iopub.status.idle":"2024-04-29T08:16:58.363383Z","shell.execute_reply.started":"2024-04-29T08:16:58.012834Z","shell.execute_reply":"2024-04-29T08:16:58.362568Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Assuming the 'budget' and 'gross' columns are cleaned and converted to numeric.\n\n\n# Sort by 'roi' and take the top 10\ntop_roi_films = df.nlargest(10, 'roi')\n\n# Bar chart for top 10 films by ROI\nplt.figure(figsize=(12, 6))\nsns.barplot(data=top_roi_films, x='roi', y='primaryTitle', palette=\"flare\")\nplt.title('Top 10 Films by ROI')\nplt.xlabel('Return on Investment')\nplt.ylabel('Film Title')\nplt.show()","metadata":{"_uuid":"5704ba21-0036-43bf-9580-271a1d49bb70","_cell_guid":"fa9a14e4-cb49-4a48-a573-c25223f64602","collapsed":false,"execution":{"iopub.status.busy":"2024-04-29T08:19:09.665554Z","iopub.execute_input":"2024-04-29T08:19:09.666589Z","iopub.status.idle":"2024-04-29T08:19:10.089668Z","shell.execute_reply.started":"2024-04-29T08:19:09.666552Z","shell.execute_reply":"2024-04-29T08:19:10.088794Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Assuming 'runtimeMinutes' is cleaned and contains no missing values.\n\n# Sort by 'runtimeMinutes' and take the top 10\ntop_runtime_films = df.nlargest(10, 'runtimeMinutes')\n\n# Bar chart for top 10 films by runtimes\nplt.figure(figsize=(12, 6))\nsns.barplot(data=top_runtime_films, x='runtimeMinutes', y='primaryTitle', palette=\"viridis\")\nplt.title('Top 10 Films by Runtime')\nplt.xlabel('Runtime (Minutes)')\nplt.ylabel('Film Title')\nplt.show()","metadata":{"_uuid":"897abb22-72ab-483c-a98a-d0a0826ba5ba","_cell_guid":"6f4b6fcc-c92f-4dfe-8730-03ab0ec5a27f","collapsed":false,"execution":{"iopub.status.busy":"2024-04-29T08:19:13.998239Z","iopub.execute_input":"2024-04-29T08:19:13.999170Z","iopub.status.idle":"2024-04-29T08:19:14.427847Z","shell.execute_reply.started":"2024-04-29T08:19:13.999131Z","shell.execute_reply":"2024-04-29T08:19:14.426468Z"},"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"_uuid":"d8d3d6a3-2758-43a1-b975-6a0f462855ac","_cell_guid":"80252946-635c-4c95-b265-449883a01cb7","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}